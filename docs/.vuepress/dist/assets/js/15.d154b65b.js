(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{431:function(t,_,v){"use strict";v.r(_);var e=v(2),r=Object(e.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"react-cli"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#react-cli"}},[t._v("#")]),t._v(" React-Cli")]),t._v(" "),_("h3",{attrs:{id:"_1-创建-react-cli-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建-react-cli-命令"}},[t._v("#")]),t._v(" 1.创建 React-cli 命令:")]),t._v(" "),_("ul",[_("li",[t._v("​ npx create-react-app '项目名称'")]),t._v(" "),_("li",[t._v("​ yarn start 或者 npm start 启动项目")])]),t._v(" "),_("h3",{attrs:{id:"_2-导入-react-和-react-dom-两个包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-导入-react-和-react-dom-两个包"}},[t._v("#")]),t._v(" 2.导入 react 和 react-dom 两个包")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("import React from 'react'")])]),t._v(" "),_("li",[_("p",[t._v("import ReactDOM from 'react-dom'")])]),t._v(" "),_("li",[_("p",[t._v("React.createElement()方法用于创建 react 元素")])]),t._v(" "),_("li",[_("p",[t._v("ReactDOM.render()方法负责渲染 react 元素到页面")])])]),t._v(" "),_("h3",{attrs:{id:"_3-jsx"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-jsx"}},[t._v("#")]),t._v(" 3.JSX")]),t._v(" "),_("ul",[_("li",[t._v("JSX 是 React 的核心内容")]),t._v(" "),_("li",[t._v("JSX 标识 js 代码中写 HTML 结构,是 React 声明式的提现")]),t._v(" "),_("li",[t._v("使用 JSX 配合嵌入的 JS 表达式，条件渲染，列表渲染，可以描述任意 UI 结构")]),t._v(" "),_("li",[t._v("推荐使用 className 的方式给 JSX 添加样式")]),t._v(" "),_("li",[t._v("React 完全利用 JS 语言自身的能力来编写 UI，而不是造轮子增强 HTML 功能")])]),t._v(" "),_("h3",{attrs:{id:"_4-react-组件基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-react-组件基础"}},[t._v("#")]),t._v(" 4.React 组件基础")]),t._v(" "),_("ul",[_("li",[t._v("组件的创建两种方式:函数组件和类组件")])]),t._v(" "),_("p",[t._v("​ 1.函数组件:function 函数名(){reurn ")]),_("div",[t._v("我是函数组件")]),t._v("}"),_("p"),t._v(" "),_("p",[t._v("​ 2.类组件:import 类名 extends React.Component {")]),t._v(" "),_("p",[t._v("​ constructor(props) {")]),t._v(" "),_("p",[t._v("​ super(props);")]),t._v(" "),_("p",[t._v("​ this.state = {")]),t._v(" "),_("p",[t._v("​ txt：“ ”")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ render() {")]),t._v(" "),_("p",[t._v("​ return ")]),_("div",[t._v("我是类组件")]),_("p"),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("ul",[_("li",[t._v("无状态(函数)组件，负责静态结构展示")]),t._v(" "),_("li",[t._v("有状态(类)组件，负责更新 UI，让页面动起来")]),t._v(" "),_("li",[t._v("绑定事件注意 this 的指向问题")])]),t._v(" "),_("p",[t._v("​ 1.{/_ 箭头函数绑定 this _/}")]),t._v(" "),_("p",[t._v("​ <button onClick={() => this.handlejia()}>+1")]),t._v(" "),_("p",[t._v("​ handlejia() {}")]),t._v(" "),_("p",[t._v("​ 2.{/_ bind 绑定 this _/}")]),t._v(" "),_("p",[t._v("​ "),_("button",{attrs:{onClick:"{this.handlejian}"}},[t._v("-1")])]),t._v(" "),_("p",[t._v("​ this.handlejian = this.handlejian.bind(this);")]),t._v(" "),_("p",[t._v("​ 3.{/_ class 绑定 this _/}")]),t._v(" "),_("p",[t._v("​ "),_("button",{attrs:{onClick:"{this.handlecheng}"}},[t._v("*2")])]),t._v(" "),_("p",[t._v("​ handleChange = (e) => {}")]),t._v(" "),_("ul",[_("li",[t._v("推荐受控组件来处理表单")])]),t._v(" "),_("ol",[_("li",[t._v("受控组件：")])]),t._v(" "),_("p",[t._v("​ <input")]),t._v(" "),_("p",[t._v('​ type="text"')]),t._v(" "),_("p",[t._v('​ name="txt"')]),t._v(" "),_("p",[t._v("​ value={this.state.txt}")]),t._v(" "),_("p",[t._v("​ onChange={this.handleChange}")]),t._v(" "),_("p",[t._v("​ >")]),t._v(" "),_("p",[t._v("​ handleChange = (e) => {")]),t._v(" "),_("p",[t._v("​ const target = e.target;")]),t._v(" "),_("p",[t._v('​ const value = target.type === "checkbox" ? target.checked : target.value;')]),t._v(" "),_("p",[t._v("​ this.setState({")]),t._v(" "),_("p",[t._v("​ });")]),t._v(" "),_("p",[t._v("​ };")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("非受控组件:Ref")])]),t._v(" "),_("p",[t._v("​ this.txtRef = React.createRef();")]),t._v(" "),_("p",[t._v("​ "),_("input",{ref:"{this.txtRef}",attrs:{type:"text"}})]),t._v(" "),_("ul",[_("li",[t._v("完全利用 js 语言能力创建组件,这是 React 的思想")])]),t._v(" "),_("h3",{attrs:{id:"_5-组件通讯介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-组件通讯介绍"}},[t._v("#")]),t._v(" 5.组件通讯介绍")]),t._v(" "),_("ul",[_("li",[t._v("​ props："),_("Hello",{attrs:{name:"我是小明"}})],1)]),t._v(" "),_("p",[t._v("​ 函数组件： Hello = (props) =>{")]),t._v(" "),_("p",[t._v("​ const name = props.name")]),t._v(" "),_("p",[t._v("​ return ")]),_("div",[t._v("{name}")]),_("p"),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ 类组件:class Hello extends React.Component {")]),t._v(" "),_("p",[t._v("​ constructor(props) {")]),t._v(" "),_("p",[t._v("​ super(props);")]),t._v(" "),_("p",[t._v("​ this.state = {")]),t._v(" "),_("p",[t._v('​ txt: "",')]),t._v(" "),_("p",[t._v("​ };")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ const { name } = this.props")]),t._v(" "),_("p",[t._v("​ render(){")]),t._v(" "),_("p",[t._v("​ return ")]),_("div",[t._v("{name }")]),_("p"),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ props 特点：可以传递任何数据")]),t._v(" "),_("p",[t._v("​ props 父传子：利用 props 特性标签传值")]),t._v(" "),_("p",[t._v("​ "),_("child",{attrs:{name:"我是要传的值"}})],1),t._v(" "),_("p",[t._v("​ props 子传父：利用回调函数传值")]),t._v(" "),_("p",[t._v("​ props 兄弟组件：利用相邻最近的父组件实现状态提升来进行数据交互")]),t._v(" "),_("ul",[_("li",[t._v("深层组件通信 Context")])]),t._v(" "),_("p",[t._v("​ const { Provider, Consumer } = React.createContext();")]),t._v(" "),_("p",[t._v("​ "),_("Provider"),t._v(" 用来传递数据")],1),t._v(" "),_("p",[t._v("​ "),_("Consumer"),t._v(" 用来接")],1),t._v(" "),_("ul",[_("li",[t._v("props 深入")])]),t._v(" "),_("p",[t._v("​ children：可以传任意类型")]),t._v(" "),_("p",[t._v("​ 效验：安装 prop-types (yarn add prop-types / npm i prop-types)")]),t._v(" "),_("p",[t._v("​ 导入 (import PropTypes from 'prop-types')")]),t._v(" "),_("p",[t._v("​ 使用 (组件名.propTypes = { colors: PropTypes.array})")]),t._v(" "),_("p",[t._v("​ 约束规则： 常见类型 (array ,bool,func,number,object,string)")]),t._v(" "),_("p",[t._v("​ React 元素类型:element")]),t._v(" "),_("p",[t._v("​ 必填项:isRequired")]),t._v(" "),_("p",[t._v("​ 特定结构的对象:shape({})")]),t._v(" "),_("p",[t._v("​ 默认值：组件名.defaultProps = {}")]),t._v(" "),_("ul",[_("li",[t._v("组件的生命周期:(*只有类组件有生命周期)")])]),t._v(" "),_("p",[t._v("​ 页面创建时：")]),t._v(" "),_("p",[t._v("​ constructor()：创建组件时最先执行,{1.初始化 state2.为事件处理程序绑定 this}")]),t._v(" "),_("p",[t._v("​ constructor(props){")]),t._v(" "),_("p",[t._v("​ super(props)")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ render()：每次组件渲染都会触发,{渲染 UI(注意:不能调用 setState())}")]),t._v(" "),_("p",[t._v("​ componentDidMount()：组件挂载(完成 DOM 渲染)后{1.发送网络请求 2.DOM 操作}")]),t._v(" "),_("p",[t._v("​ 页面更新时：触发更新三种方式(new props： 传入新的值,setState：修改新的值，forceUpdate()：强制更新方法)")]),t._v(" "),_("p",[t._v("​ render()：同上")]),t._v(" "),_("p",[t._v("​ componentDidUpdate()：组件更新(完成 DOM 渲染)后 {1.发送网络请求 2.DOM 操作 注意：如果要 setState()必须放在一个 if 条件中}")]),t._v(" "),_("p",[t._v("​ 页面卸载时💻：组件卸载（从页面消失）{执行清理工作（比如清理定时器等）}")]),t._v(" "),_("p",[t._v("render props 模式:")]),t._v(" "),_("p",[t._v("​ 子：")]),t._v(" "),_("p",[t._v("​ <child render={(获取的 state)=>{return state}}>")]),t._v(" "),_("p",[t._v("​ 父：")]),t._v(" "),_("p",[t._v("​ render(){ return this.props.render(this.state)}")]),t._v(" "),_("p",[t._v("children 模式：")]),t._v(" "),_("p",[t._v("​ 子：")]),t._v(" "),_("p",[t._v("​ "),_("child",[t._v("{ (获取的 state) => {")])],1),t._v(" "),_("p",[t._v("​ return state")]),t._v(" "),_("p",[t._v("​ }}")]),t._v(" "),_("p",[t._v("​ 父：")]),t._v(" "),_("p",[t._v("​ render(){ return this.props.children(this.state)}")]),t._v(" "),_("p",[t._v("高阶组件介绍：")]),t._v(" "),_("p",[t._v("​ (HOC,Higher-Order Component) 是一个函数，接收要包装的组件，返回增强后的组件")]),t._v(" "),_("p",[t._v("​ 高阶组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑的代码，通过 prop 将复用的状态传递给被包装组件 （WrappedComponent）")]),t._v(" "),_("p",[t._v("高阶组件使用：")]),t._v(" "),_("p",[t._v("​ 创建一个函数，名称约定以 with 开头")]),t._v(" "),_("p",[t._v("​ 指定函数参数，参数应该以大写字母开头（作为要渲染的组件）")]),t._v(" "),_("p",[t._v("​ 在函数内部创建一个类组件，提供复用的状态逻辑代码，并返回")]),t._v(" "),_("p",[t._v("​ 在该组件中，渲染参数组件，同时将状态通过 prop 传递给参数组件")]),t._v(" "),_("p",[t._v("​ 调用该高阶组件，传入要增强的组件，通过返回值拿到增强后的组件，并将其渲染到页面中")]),t._v(" "),_("p",[t._v("​ ")]),t._v(" "),_("p",[t._v("​ function withMouse(WrappedComponent) {、")]),t._v(" "),_("p",[t._v("​ ")]),t._v(" "),_("p",[t._v("​ class Mouse extends React.Component {")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ return Mouse")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("​ ")]),t._v(" "),_("p",[t._v("​ return <WrappedComponent { ...this.state } />")]),t._v(" "),_("p",[t._v("​ ")]),t._v(" "),_("p",[t._v("​ const MousePosition = withMouse（position）")]),t._v(" "),_("p",[t._v("​ "),_("MousePosition")],1),t._v(" "),_("p",[t._v("​ 案例:https://www.bilibili.com/video/BV14y4y1g7M4?p=71&spm_id_from=pageDriver")]),t._v(" "),_("p",[t._v("设置 displayName:")]),t._v(" "),_("p",[t._v("​ Mouse.displayName = "),_("code",[t._v("withMouse$(getDisplayName(WrappedComponent))")])]),t._v(" "),_("p",[t._v("​ getDisplayName = () =>{")]),t._v(" "),_("p",[t._v("​ return WrappedComponent.displayName || WrappedComponent.name || 'Component';")]),t._v(" "),_("p",[t._v("​ }")]),t._v(" "),_("p",[t._v("高阶组件传递 Props: 在高阶组件中 return 返回的标签内添加{...this.props}")]),t._v(" "),_("p",[t._v("this.setData()讲解:属于异步处理")]),t._v(" "),_("p",[t._v("​ 推荐语法：this.setData((state,prop) =>{")]),t._v(" "),_("p",[t._v("​ //state 中属于最新的值")]),t._v(" "),_("p",[t._v("​ console.log (state)")]),t._v(" "),_("p",[t._v("​ },()=>{")]),t._v(" "),_("p",[t._v("​ //异步数据处理")]),t._v(" "),_("p",[t._v("​ this.state.count //属于最新的状态值")]),t._v(" "),_("p",[t._v("​ })")]),t._v(" "),_("p",[t._v("钩子函数 shouldComponentUpdate(nextProps，nextState)")]),t._v(" "),_("p",[t._v("​ 作用:通过返回值决定该组件是否重新渲染，返回 true 表示重新渲染，false 表示不重新渲染")]),t._v(" "),_("p",[t._v("浅对比中 直接对比值是没有问题的 针对引用类型会有问题 因为引用类型对比会进行地址对比 所以针对对象或数组可使用 es6 中")]),t._v(" "),_("p",[t._v("{...对象，值}，[...原数组，新增数组] 数组也可以使用 cancat()链接 和 splice()插入 不可使用 push(),unshift()等直接改变数组的方法")]),t._v(" "),_("p",[t._v("虚拟 DOM 和 Diff 算法： 执行过程")]),t._v(" "),_("p",[t._v("​ 1.初次渲染时，react 会根据舒适 state（Model），创建一个虚拟 DOM 对象（树）。")]),t._v(" "),_("p",[t._v("​ 2.根据虚拟 DOM 生成真正的 DOM，渲染到页面中。")]),t._v(" "),_("p",[t._v("​ 3.当数据变化后（setState()，重新根据新的数据，创建新的虚拟 DOM 对象(树)）。")]),t._v(" "),_("p",[t._v("​ 4.与上一次得到的虚拟 DOM 对象，使用 Diff 算法对比(找不同)，得到需要更新的内容。")]),t._v(" "),_("p",[t._v("​ 5.最终，React 只将变化的内容更新（patch）到 DOM 中，重新渲染页面。")]),t._v(" "),_("h3",{attrs:{id:"_6-react-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-react-原理"}},[t._v("#")]),t._v(" 6.React 原理")]),t._v(" "),_("h4",{attrs:{id:"_1-工作角度-应用第一-原理第二"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-工作角度-应用第一-原理第二"}},[t._v("#")]),t._v(" 1.工作角度:应用第一，原理第二")]),t._v(" "),_("h4",{attrs:{id:"_2-原理有助于更好的理解-react-的自身运行机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-原理有助于更好的理解-react-的自身运行机制"}},[t._v("#")]),t._v(" 2.原理有助于更好的理解 React 的自身运行机制")]),t._v(" "),_("h4",{attrs:{id:"_3setstate-异步更新数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3setstate-异步更新数据"}},[t._v("#")]),t._v(" 3setState()异步更新数据")]),t._v(" "),_("h4",{attrs:{id:"_4-父组件更新导致子组件更新-纯组件提升性能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-父组件更新导致子组件更新-纯组件提升性能"}},[t._v("#")]),t._v(" 4.父组件更新导致子组件更新，纯组件提升性能")]),t._v(" "),_("h4",{attrs:{id:"_5-思路清晰简单为前提-虚拟-dom-和-diff-保效率"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-思路清晰简单为前提-虚拟-dom-和-diff-保效率"}},[t._v("#")]),t._v(" 5.思路清晰简单为前提，虚拟 DOM 和 Diff 保效率")]),t._v(" "),_("h4",{attrs:{id:"_6-虚拟-dom-state-jsx"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-虚拟-dom-state-jsx"}},[t._v("#")]),t._v(" 6.虚拟 DOM -> state+jsx")]),t._v(" "),_("h4",{attrs:{id:"_7-虚拟-dom-的真正价值从来都不是性能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-虚拟-dom-的真正价值从来都不是性能"}},[t._v("#")]),t._v(" 7.虚拟 DOM 的真正价值从来都不是性能")]),t._v(" "),_("h3",{attrs:{id:"_7-react-路由"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-react-路由"}},[t._v("#")]),t._v(" 7.React 路由")]),t._v(" "),_("h4",{attrs:{id:"_1-安装路由命令-yarn-add-react-router-dom-npm-i-react-router-dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装路由命令-yarn-add-react-router-dom-npm-i-react-router-dom"}},[t._v("#")]),t._v(" 1.安装路由命令 yarn add react-router-dom / npm i react-router-dom")]),t._v(" "),_("h4",{attrs:{id:"_2-导入路由的三个核心组件-router-route-link"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-导入路由的三个核心组件-router-route-link"}},[t._v("#")]),t._v(" 2.导入路由的三个核心组件: Router/Route/Link")]),t._v(" "),_("p",[t._v("​ import { BrowserRouter as Router , Route,Link } from 'react-router-dom'")]),t._v(" "),_("p",[t._v("​ import { HashRouter as Router , Route,Link } from 'react-router-dom'")]),t._v(" "),_("p",[t._v("​ HashRouter 地址栏有 /#/")]),t._v(" "),_("h4",{attrs:{id:"_3-router-组件包裹整个应用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-router-组件包裹整个应用"}},[t._v("#")]),t._v(" 3.Router 组件包裹整个应用")]),t._v(" "),_("h4",{attrs:{id:"_4-link-组件指定路由的入口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-link-组件指定路由的入口"}},[t._v("#")]),t._v(" 4.Link 组件指定路由的入口 "),_("Link",{attrs:{to:"地址(/first)"}})],1),t._v(" "),_("h4",{attrs:{id:"_5-route-指定路由的出口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-route-指定路由的出口"}},[t._v("#")]),t._v(" 5.Route 指定路由的出口 "),_("Route",{attrs:{path:"地址(/first)",component:"{组件(First)}"}})],1),t._v(" "),_("h4",{attrs:{id:"_6-编程时导航-this-props-history-push-地址-跳转-this-props-history-go-1-返回"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-编程时导航-this-props-history-push-地址-跳转-this-props-history-go-1-返回"}},[t._v("#")]),t._v(" 6.编程时导航 this.props.history.push('地址')跳转 this.props.history.go('-1')返回")]),t._v(" "),_("h4",{attrs:{id:"_7-默认路由-path-设置为"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-默认路由-path-设置为"}},[t._v("#")]),t._v(" 7.默认路由 path 设置为‘/’")]),t._v(" "),_("h4",{attrs:{id:"_8-模糊匹配-只要-pathname-是以-path-开头就会展示-。精确匹配-在需要的-router-添加-exact-属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-模糊匹配-只要-pathname-是以-path-开头就会展示-。精确匹配-在需要的-router-添加-exact-属性"}},[t._v("#")]),t._v(" 8.模糊匹配:只要 pathname 是以 path 开头就会展示 。精确匹配:在需要的 Router 添加 exact 属性")])])}),[],!1,null,null,null);_.default=r.exports}}]);